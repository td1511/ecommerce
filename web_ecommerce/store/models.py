from django.db import models
from django.conf import settings

# Create your models here.
from django.contrib.auth.hashers import make_password, check_password
from django.core.exceptions import ValidationError

class User(models.Model):
    ROLE_CHOICES = [
        ('seller', 'Seller'),
        ('customer', 'Customer'),
    ]

    name = models.CharField(max_length=100)  # T√™n ng∆∞·ªùi d√πng
    telephone = models.CharField(max_length=15, unique=True)  # S·ªë ƒëi·ªán tho·∫°i, kh√¥ng tr√πng
    email = models.EmailField(unique=True)  # Email, kh√¥ng tr√πng l·∫∑p
    password = models.CharField(max_length=255)  # M·∫≠t kh·∫©u, n√™n ƒë∆∞·ª£c m√£ h√≥a
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='buyer')  # Vai tr√≤ ng∆∞·ªùi d√πng
    created_at = models.DateTimeField(auto_now_add=True)  # Th·ªùi gian t·∫°o
    updated_at = models.DateTimeField(auto_now=True)  # Th·ªùi gian c·∫≠p nh·∫≠t

    def __str__(self):
        return f"{self.name} - {self.get_role_display()}"

    '''def set_password(self, raw_password):
        """M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u"""
        self.password = make_password(raw_password)
        self.save()

    def check_password(self, raw_password):
        """Ki·ªÉm tra m·∫≠t kh·∫©u nh·∫≠p v√†o c√≥ ƒë√∫ng kh√¥ng"""
        return check_password(raw_password, self.password)'''

class Customer(models.Model):
    user = models.OneToOneField('User', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def clean(self):
        """ƒê·∫£m b·∫£o ch·ªâ user c√≥ role l√† 'buyer' m·ªõi ƒë∆∞·ª£c t·∫°o th√†nh Customer"""
        if self.user.role != 'customer':
            raise ValidationError("Ch·ªâ c√≥ User c√≥ role l√† 'customer' m·ªõi ƒë∆∞·ª£c t·∫°o th√†nh Customer")

    def save(self, *args, **kwargs):
        """G·ªçi clean() tr∆∞·ªõc khi l∆∞u"""
        self.clean() # ƒë·∫£m b·∫£o ch·ªâ customer m·ªõi ƒë∆∞·ª£c l∆∞u h√†m clean n√†y l√† g·ªçi h√†m clean t·ª± ƒë·ªãnh nghƒ©a
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Customer: {self.user.name}"


class Category(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

# 4. Model Product
class Product(models.Model):
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    brand = models.TextField(blank=True, null=True)
    price_purchase = models.DecimalField(max_digits=10, decimal_places=2)
    price_selling = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    quantity_sold = models.PositiveIntegerField(default=0, blank=True, null=True)

    quantity_left = models.PositiveIntegerField(default=0)
    discount = models.FloatField(default=0.0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    user = models.ForeignKey('User', on_delete=models.CASCADE, null=True, blank=True, related_name='products_created')

    def __str__(self):
        return self.name

    @property
    def status(self):
        return "C√≤n h√†ng" if self.quantity_left > 0 else "H·∫øt h√†ng"

class ProductImage(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to='products/')

    def __str__(self):
        return f"·∫¢nh c·ªßa {self.product.name}"
    
# 5. Model Order
'''class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=[('pending', 'Pending'), ('shipped', 'Shipped'), ('completed', 'Completed')], default='pending')
    shipping_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0.0)
    created_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(blank=True, null=True)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.0)
    payment_status = models.CharField(max_length=20, choices=[('unpaid', 'Unpaid'), ('paid', 'Paid')], default='unpaid')
    payment_method = models.CharField(max_length=20, choices=[('cash', 'Cash'), ('card', 'Card')], default='cash')

    def __str__(self):
        return f"Order {self.id} - {self.customer.user.username}"'''
        
'''class Address(models.Model):
    customer = models.ForeignKey('Customer', on_delete=models.CASCADE, related_name='addresses')
    recipient_name = models.CharField(max_length=100)
    phone = models.CharField(max_length=20)
    address_line = models.TextField()
    is_default = models.BooleanField(default=False)  # ƒë√°nh d·∫•u ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.recipient_name} - {self.address_line}"
    
'''
class Address(models.Model):
    customer = models.ForeignKey('Customer', on_delete=models.CASCADE, related_name='addresses')
    city = models.CharField(max_length=100, default= '')
    district = models.CharField(max_length=100, default= '')
    ward = models.CharField(max_length=100,default='')
    street = models.CharField(max_length=100, default='')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.street}, {self.ward}, {self.district}, {self.city}"


class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Ch·ªù x√°c nh·∫≠n'),
        ('shipping', 'ƒêang giao'),
        ('delivered', 'ƒê√£ giao'),
        ('cancelled', 'ƒê√£ hu·ª∑'),
    ]

    PAYMENT_METHODS = [
        ('cash', 'Thanh to√°n khi nh·∫≠n h√†ng'),
        ('card', 'Th·∫ª ng√¢n h√†ng'),
    ]

    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)
    seller = models.ForeignKey('User', on_delete=models.CASCADE, null=True, blank=True, related_name='seller_orders')  # üëà Th√™m d√≤ng n√†y
    address = models.ForeignKey('Address', on_delete=models.SET_NULL, null=True, blank=True)
    total_amount = models.DecimalField(max_digits=12, decimal_places=2)
    shipping_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    payment_status = models.CharField(max_length=20, default='unpaid')
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHODS, default='cash')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order {self.id} - {self.customer.user.name}"

    def save(self, *args, **kwargs):
        # N·∫øu ƒë∆°n h√†ng ƒë√£ c√≥ trong DB th√¨ ki·ªÉm tra thay ƒë·ªïi tr·∫°ng th√°i
        if self.pk:
            old_order = Order.objects.get(pk=self.pk)
            if old_order.status != self.status:
                self.handle_status_change(old_order.status, self.status)
        super().save(*args, **kwargs)

    def handle_status_change(self, old_status, new_status):
        order_items = self.orderitem_set.all()
        for item in order_items:
            product = item.product
            quantity = item.quantity

            # N·∫øu chuy·ªÉn t·ª´ pending sang delivered -> tr·ª´ kho, c·ªông ƒë√£ b√°n
            if old_status == 'pending' and new_status == 'delivered':
                product.quantity_left -= quantity
                product.quantity_sold += quantity

            # N·∫øu t·ª´ pending sang cancelled -> kh√¥ng giao h√†ng n·ªØa => kh√¥ng tr·ª´ kho, kh√¥ng c·ªông ƒë√£ b√°n
            elif old_status == 'pending' and new_status == 'cancelled':
                # N·∫øu ƒë√£ t·ª´ng tr·ª´ kho & c·ªông sold khi pending (v√≠ d·ª• pending t·ª± tr·ª´ kho), th√¨ kh√¥i ph·ª•c
                product.quantity_left += quantity
                product.quantity_sold = max(product.quantity_sold - quantity, 0)

            # N·∫øu t·ª´ cancelled sang tr·∫°ng th√°i kh√°c (ƒë∆°n kh√¥i ph·ª•c l·∫°i) => tr·ª´ kho
            elif old_status == 'cancelled' and new_status != 'cancelled':
                product.quantity_left -= quantity

            # N·∫øu t·ª´ tr·∫°ng th√°i kh√°c sang delivered (nh∆∞ng kh√¥ng ph·∫£i t·ª´ pending)
            elif old_status != 'delivered' and new_status == 'delivered':
                product.quantity_sold += quantity

            product.save()


    
# 6. Model OrderItem
class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    price_at_order = models.DecimalField(max_digits=10, decimal_places=2)  # Gi√° t·∫°i th·ªùi ƒëi·ªÉm ƒë·∫∑t h√†ng

    def __str__(self):
        return f"{self.quantity} x {self.product.name} in Order {self.order.id}"
    
class Cart(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"Gi·ªè h√†ng c·ªßa {self.user.name}"
    
class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    
    def subtotal(self):
        return self.product.price_selling * self.quantity
    




